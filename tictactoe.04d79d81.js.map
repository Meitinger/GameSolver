{"mappings":"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","sources":["src/tictactoe.ts"],"sourcesContent":["/*\n * Visual Solver for Decision Games\n * Copyright (C) 2021  Manuel Meitinger\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { JSONSchemaType } from 'ajv'\nimport * as Comlink from 'comlink'\nimport {\n  PlayerInfo, RenderingContext, TypedGame, isWorker\n} from './game'\n\ntype Player = 'x' | 'o'\ntype Space = ' ' | Player\n\nexport interface Setup {\n  board: Space[][]\n  start: Player\n}\n\ntype State = [boolean, number, number] // [is X turn, x checks, o checks]\n\nconst PI2 = Math.PI * 2\n\nexport const Schema: JSONSchemaType<Setup> = {\n  type: 'object',\n  properties: {\n    board: {\n      type: 'array',\n      description: 'Specifies the initial board setup, one array per horizontal line.',\n      minItems: 3,\n      maxItems: 3,\n      items: {\n        type: 'array',\n        description: 'Specifies the three spaces of one horizontal line.',\n        minItems: 3,\n        maxItems: 3,\n        items: {\n          type: 'string',\n          description: '\"x\" for player X, \"o\" for player O or \" \" if no one has marked the space yet.',\n          enum: [' ', 'x', 'o']\n        }\n      }\n    },\n    start: {\n      type: 'string',\n      description: 'Specifies the player who should start, either \"x\" for player X or \"o\" for player O.',\n      enum: ['x', 'o']\n    }\n  },\n  required: ['board', 'start'],\n  additionalProperties: false\n}\n\nexport class TicTacToe extends TypedGame<Setup, State> {\n  protected readonly schema = Schema\n\n  public getPlayers (): PlayerInfo[] {\n    return [\n      {\n        name: 'x',\n        color: '#0f0'\n      },\n      {\n        name: 'o',\n        color: '#f00'\n      }\n    ]\n  }\n\n  protected encodeState (state: State): string {\n    const [nextIsX, x, o] = state\n    const encodeState = ((nextIsX ? 0x80000 : 0) | (x << 9) | o).toString(16)\n    return '0'.repeat(5 - encodeState.length) + encodeState\n  }\n\n  protected decodeState (encodedState: string): State {\n    const state = parseInt(encodedState, 16)\n    return [(state & 0x80000) === 0, (state >> 9) & 0x3FF, state & 0x3FF]\n  }\n\n  protected getInitialState (): State {\n    const setup = this.getSetup()\n    let x = 0\n    let o = 0\n    setup.board.forEach((line, row) => line.forEach((space, col) => {\n      const val = 1 << (row * 3 + col)\n      switch (space) {\n        case 'o':\n          o |= val\n          break\n        case 'x':\n          x |= val\n          break\n        case ' ':\n          break\n      }\n    }))\n    return [setup.start === 'x', x, o]\n  }\n\n  protected * getNextStates (state: State): Iterable<[number, Iterable<State>]> {\n    const [nextIsX, x, o] = state\n    if (this.isWinning(x) || this.isWinning(o)) {\n      return\n    }\n    const me = nextIsX ? x : o\n    const you = nextIsX ? o : x\n    for (let i = 8; i >= 0; i--) {\n      const val = 1 << i\n      if ((me & val) === 0 && (you & val) === 0) {\n        yield nextIsX ? [0, [[false, me | val, you]]] : [1, [[true, you, me | val]]]\n      }\n    }\n  }\n\n  private isWinning (n: number): boolean {\n    return (n & 7) === 7 || (n & 56) === 56 || (n & 448) === 448 ||\n            (n & 73) === 73 || (n & 146) === 146 || (n & 292) === 292 ||\n            (n & 273) === 273 || (n & 84) === 84\n  }\n\n  protected * getWinningPlayersFromState (state: State): Iterable<number> {\n    const [, x, o] = state\n    if (this.isWinning(x)) {\n      yield 0\n    }\n    if (this.isWinning(o)) {\n      yield 1\n    }\n  }\n\n  protected renderState (state: State, width: number, height: number, ctx: RenderingContext): void {\n    const size = Math.min(width, height)\n    const left = (width - size) / 2\n    const top = (height - size) / 2\n    const oneThirdSize = size / 3\n    const twoThirdsSize = (size * 2) / 3\n    const oneSixthSize = size / 6\n    const radius = size / 12\n    ctx.lineWidth = Math.max(size / 72, 1)\n    ctx.strokeStyle = 'black'\n    ctx.beginPath()\n    ctx.moveTo(left, top + oneThirdSize)\n    ctx.lineTo(left + size, top + oneThirdSize)\n    ctx.stroke()\n    ctx.beginPath()\n    ctx.moveTo(left, top + twoThirdsSize)\n    ctx.lineTo(left + size, top + twoThirdsSize)\n    ctx.stroke()\n    ctx.beginPath()\n    ctx.moveTo(left + oneThirdSize, top)\n    ctx.lineTo(left + oneThirdSize, top + size)\n    ctx.stroke()\n    ctx.beginPath()\n    ctx.moveTo(left + twoThirdsSize, top)\n    ctx.lineTo(left + twoThirdsSize, top + size)\n    ctx.stroke()\n\n    const [, x, o] = state\n    for (let row = 0; row < 3; row++) {\n      for (let col = 0; col < 3; col++) {\n        const flag = 1 << (row * 3 + col)\n        const centerX = left + oneSixthSize * (col * 2 + 1)\n        const centerY = top + oneSixthSize * (row * 2 + 1)\n        if ((x & flag) !== 0) {\n          ctx.strokeStyle = 'green'\n          ctx.beginPath()\n          ctx.moveTo(centerX - radius, centerY - radius)\n          ctx.lineTo(centerX + radius, centerY + radius)\n          ctx.stroke()\n          ctx.beginPath()\n          ctx.moveTo(centerX - radius, centerY + radius)\n          ctx.lineTo(centerX + radius, centerY - radius)\n          ctx.stroke()\n        }\n        if ((o & flag) !== 0) {\n          ctx.strokeStyle = 'red'\n          ctx.beginPath()\n          ctx.ellipse(centerX, centerY, radius, radius, 0, 0, PI2)\n          ctx.stroke()\n        }\n      }\n    }\n  }\n}\n\nisWorker() && Comlink.expose(new TicTacToe())\n"],"names":["$e6kUJ","parcelRequire","$4a3e37ae3846ecac$var$PI2","Math","PI","$4a3e37ae3846ecac$export$19342e026b58ebb7","type","properties","board","description","minItems","maxItems","items","enum","start","required","additionalProperties","$4a3e37ae3846ecac$export$4f61d872b11019bf","TypedGame","defineProperty","assertThisInitialized","_this","key","name","color","state","_state","slicedToArray","encodeState1","toString","repeat","length","encodedState","parseInt","setup","this","getSetup","x","o","forEach","line","row","space","col","val","getNextStates","nextIsX","me","you","i","_ctx","isWinning","n","getWinningPlayersFromState","width","height","ctx","size","min","left","top","oneThirdSize","twoThirdsSize","oneSixthSize","radius","lineWidth","max","strokeStyle","beginPath","moveTo","lineTo","stroke","flag","centerX","centerY","ellipse","$1zfaW","isWorker","$PAmCh","expose"],"version":3,"file":"tictactoe.04d79d81.js.map"}