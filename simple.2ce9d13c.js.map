{"mappings":"mwBAmCaA,EAAgC,CACzCC,KAAM,SACNC,WAAY,CACRC,QAAS,CACLF,KAAM,SACNG,YAAa,mEACbC,kBAAmB,CACf,IAAK,CACDJ,KAAM,SACNC,WAAY,CACRI,MAAO,CACHL,KAAM,SACNG,YAAa,gHACbG,QAAS,8EAEbC,MAAO,CACHP,KAAM,SACNG,YAAa,kGACbC,kBAAmB,CACf,IAAK,CACDJ,KAAM,QACNG,YAAa,yFACbK,aAAa,EACbC,MAAO,CACHT,KAAM,YAIlBU,SAAU,GACVC,sBAAsB,GAE1BC,KAAM,CACFZ,KAAM,QACNG,YAAa,6DACbK,aAAa,EACbC,MAAO,CACHT,KAAM,YAIlBU,SAAU,CAAC,QAAS,QAAS,QAC7BC,sBAAsB,IAG9BD,SAAU,GACVC,sBAAsB,GAE1BE,MAAO,CACHb,KAAM,SACNG,YAAa,4DAGrBO,SAAU,CAAC,UAAW,SACtBC,sBAAsB,GAGbG,EAAN,SAAQC,yBAAFD,uCAAAA,wDAAAA,GAAME,MAAAC,KAAAC,aACIC,OAASpB,sBADnBe,EAAMC,iBAAND,EAAM,EAGRM,IAAA,mBAAP,WACI,OAAOC,OAAOC,QAAQL,KAAKM,WAAWrB,SAASsB,KAAI,SAAQC,8BAAa,MAAA,CAAEC,KAAjBC,EAAA,GAAuBtB,MAAfsB,EAAA,GAA6BtB,aAGxFe,IAAA,oBAAV,SAAsBQ,GAClB,OAAOA,KAGDR,IAAA,oBAAV,SAAsBS,GAClB,OAAOA,KAGDT,IAAA,wBAAV,WACI,OAAOH,KAAKM,WAAWV,SAGjBO,IAAA,sBAAV,SAAwBQ,OACyDE,EAA7E,OAAOT,OAAOU,OAAOd,KAAKM,WAAWrB,SAASsB,KAAI,SAACQ,EAAQC,GAAU,MAAA,CAACA,EAAyB,QAAlBH,EAAAE,EAAOzB,MAAMqB,UAAM,IAAnBE,EAAAA,EAAuB,UAG9FV,IAAA,mCAAV,SAAqCQ,GACjC,OAAOP,OAAOU,OAAOd,KAAKM,WAAWrB,SAASgC,QAAiB,SAACC,EAAQH,EAAQC,GAI5E,OAHID,EAAOpB,KAAKwB,SAASR,IACrBO,EAAOE,KAAKJ,GAETE,IACR,OAGGf,IAAA,oBAAV,WACI,MAAM,IAAIkB,MAAM,wBAjCXxB,EAAN,CAAqByB,EAAAxB,WAqC5BwB,EAAAC,YAAcC,EAAAC,OAAe,IAAI5B","sources":["src/simple.ts"],"sourcesContent":["/*\n * Visual Solver for Decision Games\n * Copyright (C) 2021  Manuel Meitinger\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { JSONSchemaType } from 'ajv'\nimport * as Comlink from 'comlink'\nimport { PlayerInfo, TypedGame, isWorker } from './game'\n\nexport interface Setup {\n    players: {\n        [name: string]: {\n            color: string\n            moves: { [state: string]: string[] }\n            wins: string[]\n        }\n    },\n    start: string\n}\n\ntype State = string\n\nexport const Schema: JSONSchemaType<Setup> = {\n    type: 'object',\n    properties: {\n        players: {\n            type: 'object',\n            description: 'An associative list of players, where the index is player\\' name.',\n            patternProperties: {\n                '.': {\n                    type: 'object',\n                    properties: {\n                        color: {\n                            type: 'string',\n                            description: 'The player\\'s color, either in short \"#rgb\" form, long \"#rrggbb\" form, or with alpha \"rgba(rrr,ggg,bbb,aaa)\".',\n                            pattern: '^(#([a-fA-F0-9]{3}|[a-fA-F0-9]{6})|rgba\\\\([0-9]+,[0-9]+,[0-9]+,[0-9]+\\\\))$'\n                        },\n                        moves: {\n                            type: 'object',\n                            description: 'An associative list of moves the player can make, where the index specifies the starting state.',\n                            patternProperties: {\n                                '^': {\n                                    type: 'array',\n                                    description: 'An unique list of end state the current player can reach from the current start state.',\n                                    uniqueItems: true,\n                                    items: {\n                                        type: 'string'\n                                    }\n                                }\n                            },\n                            required: [],\n                            additionalProperties: false\n                        },\n                        wins: {\n                            type: 'array',\n                            description: 'An unique list of states in which the current player wins.',\n                            uniqueItems: true,\n                            items: {\n                                type: 'string'\n                            }\n                        }\n                    },\n                    required: ['color', 'moves', 'wins'],\n                    additionalProperties: false\n                }\n            },\n            required: [],\n            additionalProperties: false\n        },\n        start: {\n            type: 'string',\n            description: 'The name of the initial state in which the game starts.'\n        }\n    },\n    required: ['players', 'start'],\n    additionalProperties: false\n}\n\nexport class Simple extends TypedGame<Setup, State> {\n    protected readonly schema = Schema\n\n    public getPlayers(): PlayerInfo[] {\n        return Object.entries(this.getSetup().players).map(([name, player]) => ({ name, color: player.color }))\n    }\n\n    protected encodeState(state: State): string {\n        return state\n    }\n\n    protected decodeState(encodedState: string): State {\n        return encodedState\n    }\n\n    protected getInitialState(): State {\n        return this.getSetup().start\n    }\n\n    protected getNextStates(state: State): Iterable<[number, Iterable<State>]> {\n        return Object.values(this.getSetup().players).map((player, index) => [index, player.moves[state] ?? []])\n    }\n\n    protected getWinningPlayersFromState(state: State): Iterable<number> {\n        return Object.values(this.getSetup().players).reduce<number[]>((result, player, index) => {\n            if (player.wins.includes(state)) {\n                result.push(index)\n            }\n            return result\n        }, [])\n    }\n\n    protected renderState(): void {\n        throw new Error('Not implemented.')\n    }\n}\n\nisWorker() && Comlink.expose(new Simple())\n"],"names":["$9b21dae4c8a80c09$export$19342e026b58ebb7","type","properties","players","description","patternProperties","color","pattern","moves","uniqueItems","items","required","additionalProperties","wins","start","$9b21dae4c8a80c09$export$f3818faa9fce9618","TypedGame","apply","this","arguments","schema","key","Object","entries","getSetup","map","param","name","_param","state","encodedState","_state","values","player","index","reduce","result","includes","push","Error","$1zfaW","isWorker","$PAmCh","expose"],"version":3,"file":"simple.2ce9d13c.js.map"}